{"version":3,"sources":["components/FamilyNode/FamilyNode.module.css","components/PinchZoomPan/PinchZoomPan.tsx","components/FamilyNode/FamilyNode.tsx","components/App/App.tsx","index.tsx","components/App/App.module.css","components/PinchZoomPan/PinchZoomPan.module.css"],"names":["module","exports","React","memo","min","max","captureWheel","className","style","children","root","useRef","useEffect","element","current","create","minZoom","maxZoom","ref","classNames","css","point","canvas","node","isRoot","onSubClick","styles","inner","gender","hasSubTree","sub","onClick","id","SOURCES","averageTree","couple","diffParents","divorcedParents","empty","severalSpouses","simpleFamily","testTreeN1","testTreeN2","source","setSource","useState","nodes","setNodes","myId","rootId","setRootId","newNodes","onResetClick","useCallback","header","title","onChange","event","target","value","defaultValue","Object","keys","map","item","href","wrapper","width","height","tree","renderNode","transform","left","top","reset","ReactDOM","render","document","getElementById"],"mappings":"oJACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,MAAQ,0BAA0B,KAAO,yBAAyB,OAAS,2BAA2B,OAAS,2BAA2B,IAAM,0B,wICcnLC,MAAMC,MACnB,YAA+E,IAAzD,IAAEC,EAAF,IAAOC,EAAP,aAAYC,EAAZ,UAA0BC,EAA1B,MAAqCC,EAArC,SAA4CC,GAAY,EAC5E,MAAMC,EAAOC,iBAAuB,MAQpC,OANAC,qBAAU,KACR,MAAMC,EAAUH,EAAKI,QACrB,GAAKD,EACL,OAAOE,YAAO,CAAEF,UAASG,QAASZ,EAAKa,QAASZ,EAAKC,mBACpD,CAACF,EAAKC,EAAKC,IAGZ,qBAAKY,IAAKR,EAAMH,UAAWY,IAAWZ,EAAWa,IAAIV,MAAOF,MAAOA,EAAnE,SACE,qBAAKD,UAAWa,IAAIC,MAApB,SACE,qBAAKd,UAAWa,IAAIE,OAApB,SACGb,W,gBCjBEP,MAAMC,MACnB,YAA0D,IAAtC,KAAEoB,EAAF,OAAQC,EAAR,WAAgBC,EAAhB,MAA4BjB,GAAS,EACvD,OACE,sBAAKD,UAAWmB,IAAOhB,KAAMF,MAAOA,EAApC,UACE,qBACED,UAAWY,IACTO,IAAOC,MACPD,IAAOH,EAAKK,QACZJ,GAAUE,IAAOF,UAGpBD,EAAKM,YACJ,qBACEtB,UAAWY,IAAWO,IAAOI,IAAKJ,IAAOH,EAAKK,SAC9CG,QAAS,IAAMN,EAAWF,EAAKS,Y,sFCR3C,MAOMC,EAAqC,CACzC,oBAAqBC,EACrB,cAAeC,EACf,oBAAqBC,EACrB,wBAAyBC,EACzB,aAAcC,EACd,uBAAwBC,EACxB,qBAAsBC,EACtB,oBAAqBC,EACrB,oBAAqBC,GAGRxC,UAAMC,MACnB,WACE,MAAOwC,EAAQC,GAAaC,mBAlBT,sBAmBZC,EAAOC,GAAYF,mBAAiBZ,EAAQU,IAC7CK,EAAOf,EAAQU,GAAQ,GAAGX,IACzBiB,EAAQC,GAAaL,mBAAiBG,GAE7CpC,qBAAU,KACR,MAAMuC,EAAWlB,EAAQU,GAEzBO,EAAUC,EAAS,GAAGnB,IACtBe,EAASI,KACR,CAACR,IAEJ,MAAMS,EAAeC,uBAAY,IAAMH,EAAUF,IAAO,CAACA,IAKzD,OACE,sBAAKzC,UAAWmB,IAAOhB,KAAvB,UACE,yBAAQH,UAAWmB,IAAO4B,OAA1B,UACE,oBAAI/C,UAAWmB,IAAO6B,MAAtB,6BAIA,gCACE,4CACA,wBAAQC,SAbKC,IACnBb,EAAUa,EAAMC,OAAOC,QAYcC,aAAcjB,EAA7C,SACGkB,OAAOC,KAAK7B,GAAS8B,KAAKC,GACzB,wBAAmBL,MAAOK,EAA1B,SAAiCA,GAApBA,UAKnB,mBAAGC,KAAK,6DAAR,uBAEF,cAAC,EAAD,CACE7D,IAAK,GACLC,IAAK,IACLC,cAAY,EACZC,UAAWmB,IAAOwC,QAJpB,SAME,cAAC,IAAD,CACEpB,MAAOA,EACPG,OAAQA,EACRkB,MAjEE,GAkEFC,OAjEG,GAkEH7D,UAAWmB,IAAO2C,KAClBC,WAAa/C,GACX,cAAC,EAAD,CAEEA,KAAMA,EACNC,OAAQD,EAAKS,KAAOiB,EACpBxB,WAAYyB,EACZ1C,MAAO,CACL2D,MA3EJ,GA4EIC,OA3EH,GA4EGG,UAAU,aAAD,OAAe,GAAAhD,EAAKiD,KAApB,eAA6C,GAAAjD,EAAKkD,IAAlD,SAPNlD,EAAKS,QAajBiB,IAAWD,GACV,qBAAKzC,UAAWmB,IAAOgD,MAAO3C,QAASqB,EAAvC,yBChGVuB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,kBCLjD9E,EAAOC,QAAU,CAAC,KAAO,kBAAkB,OAAS,oBAAoB,MAAQ,mBAAmB,QAAU,qBAAqB,KAAO,kBAAkB,MAAQ,qB,kBCAnKD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,4BAA4B,OAAS,gC","file":"static/js/main.f720a96d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FamilyNode_root__1MX6K\",\"inner\":\"FamilyNode_inner__3gImM\",\"male\":\"FamilyNode_male__2W4NO\",\"female\":\"FamilyNode_female__3NgRT\",\"isRoot\":\"FamilyNode_isRoot__3viB_\",\"sub\":\"FamilyNode_sub__K8tlo\"};","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { create } from 'pinch-zoom-pan';\n\nimport css from './PinchZoomPan.module.css';\n\ninterface IProps {\n  min?: number;\n  max?: number;\n  captureWheel?: boolean;\n  className?: string;\n  style?: React.CSSProperties;\n  children: React.ReactNode;\n}\n\nexport default React.memo<IProps>(\n  function PinchZoomPan({ min, max, captureWheel, className, style, children }) {\n    const root = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      const element = root.current;\n      if (!element) return;\n      return create({ element, minZoom: min, maxZoom: max, captureWheel });\n    }, [min, max, captureWheel]);\n\n    return (\n      <div ref={root} className={classNames(className, css.root)} style={style}>\n        <div className={css.point}>\n          <div className={css.canvas}>\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ExtNode } from 'relatives-tree/lib/types';\nimport styles from './FamilyNode.module.css';\n\ninterface Props {\n  node: ExtNode;\n  isRoot: boolean;\n  onSubClick: (id: string) => void;\n  style?: React.CSSProperties;\n}\n\nexport default React.memo<Props>(\n  function FamilyNode({ node, isRoot, onSubClick, style }) {\n    return (\n      <div className={styles.root} style={style}>\n        <div\n          className={classNames(\n            styles.inner,\n            styles[node.gender],\n            isRoot && styles.isRoot,\n          )}\n        />\n        {node.hasSubTree && (\n          <div\n            className={classNames(styles.sub, styles[node.gender])}\n            onClick={() => onSubClick(node.id)}\n          />\n        )}\n      </div>\n    );\n  }\n);\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Node, ExtNode } from 'relatives-tree/lib/types';\nimport ReactFamilyTree from 'react-family-tree';\nimport PinchZoomPan from '../PinchZoomPan/PinchZoomPan';\nimport FamilyNode from '../FamilyNode/FamilyNode';\n\nimport averageTree from 'relatives-tree/samples/average-tree.json';\nimport couple from 'relatives-tree/samples/couple.json';\nimport diffParents from 'relatives-tree/samples/diff-parents.json';\nimport divorcedParents from 'relatives-tree/samples/divorced-parents.json';\nimport empty from 'relatives-tree/samples/empty.json';\nimport severalSpouses from 'relatives-tree/samples/several-spouses.json';\nimport simpleFamily from 'relatives-tree/samples/simple-family.json';\nimport testTreeN1 from 'relatives-tree/samples/test-tree-n1.json';\nimport testTreeN2 from 'relatives-tree/samples/test-tree-n2.json';\n\nimport styles from './App.module.css';\n\nconst WIDTH = 70;\nconst HEIGHT = 80;\n\nconst DEFAULT_SOURCE = 'average-tree.json'\n\ntype Source = Array<Node>\n\nconst SOURCES: { [key: string]: Source } = {\n  'average-tree.json': averageTree as Source,\n  'couple.json': couple as Source,\n  'diff-parents.json': diffParents as Source,\n  'divorced-parents.json': divorcedParents as Source,\n  'empty.json': empty as Source,\n  'several-spouses.json': severalSpouses as Source,\n  'simple-family.json': simpleFamily as Source,\n  'test-tree-n1.json': testTreeN1 as Source,\n  'test-tree-n2.json': testTreeN2 as Source\n}\n\nexport default React.memo<{}>(\n  function App() {\n    const [source, setSource] = useState<string>(DEFAULT_SOURCE);\n    const [nodes, setNodes] = useState<Source>(SOURCES[source]);\n    const myId = SOURCES[source][0].id\n    const [rootId, setRootId] = useState<string>(myId);\n\n    useEffect(() => {\n      const newNodes = SOURCES[source];\n\n      setRootId(newNodes[0].id);\n      setNodes(newNodes);\n    }, [source])\n\n    const onResetClick = useCallback(() => setRootId(myId), [myId]);\n    const onSetSource = (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setSource(event.target.value)\n    }\n\n    return (\n      <div className={styles.root}>\n        <header className={styles.header}>\n          <h1 className={styles.title}>\n            FamilyTree demo\n          </h1>\n\n          <div>\n            <span>Source: </span>\n            <select onChange={onSetSource} defaultValue={source}>\n              {Object.keys(SOURCES).map((item) => (\n                <option key={item} value={item}>{item}</option>\n              ))}\n            </select>\n          </div>\n\n          <a href=\"https://github.com/SanichKotikov/react-family-tree-example\">GitHub</a>\n        </header>\n        <PinchZoomPan\n          min={0.5}\n          max={2.5}\n          captureWheel\n          className={styles.wrapper}\n        >\n          <ReactFamilyTree\n            nodes={nodes as Node[]}\n            rootId={rootId}\n            width={WIDTH}\n            height={HEIGHT}\n            className={styles.tree}\n            renderNode={(node: ExtNode) => (\n              <FamilyNode\n                key={node.id}\n                node={node}\n                isRoot={node.id === rootId}\n                onSubClick={setRootId}\n                style={{\n                  width: WIDTH,\n                  height: HEIGHT,\n                  transform: `translate(${node.left * (WIDTH / 2)}px, ${node.top * (HEIGHT / 2)}px)`,\n                }}\n              />\n            )}\n          />\n        </PinchZoomPan>\n        {rootId !== myId && (\n          <div className={styles.reset} onClick={onResetClick}>\n            Reset\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1Jh3p\",\"header\":\"App_header__2MS2l\",\"title\":\"App_title__1YcTA\",\"wrapper\":\"App_wrapper__3ox-V\",\"tree\":\"App_tree__1-Ar8\",\"reset\":\"App_reset__2p6Ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PinchZoomPan_root__9P_Qv\",\"point\":\"PinchZoomPan_point__2y-JG\",\"canvas\":\"PinchZoomPan_canvas__EVab0\"};"],"sourceRoot":""}